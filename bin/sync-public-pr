#!/usr/bin/env ruby

require "net/http"
require "open3"
require "json"

# Job params
GH_TOKEN        = ENV.fetch("GH_TOKEN")
PUBLIC_GH_REPO  = ENV.fetch("PUBLIC_GH_REPO")
PRIVATE_GH_REPO = ENV.fetch("PRIVATE_GH_REPO")

PR_NUMBER       = `buildkite-agent meta-data get "pull_request_number"`.strip.to_i
TARGET_BRANCH   = "docs-public-pr-#{PR_NUMBER}"

# ANSI Colour codes
CYAN = "\e[0;36m"
GREEN_BOLD = "\e[1;32m"
YELLOW = "\e[0;33m"
YELLOW_BOLD = "\e[1;33m"
RED_BOLD = "\e[1;31m"
PURPLE = "\e[0;35m"
RESET = "\e[0m"

class Git
  attr_reader :token

  def initialize(token)
    @token = token
  end

  def setup_credential_helper!
    `git config credential.helper '!f() { echo "username=buildkite-systems"; echo "password=#{token}"; }; f'`
    $?.success? or raise "Failed to setup git credential helper"
  end

  # pull the magic PR ref from the public repo into local docs-public-pr-<PR_NUMBER> branch
  def sync_branch_locally(pr_number, target_ref)
    source_ref = "pull/#{pr_number}/head"

    # https://git-scm.com/docs/git-fetch see docs on refspec format
    refspec = "#{source_ref}:#{TARGET_BRANCH}"

    `git fetch --force "https://github.com/#{PUBLIC_GH_REPO}.git" "#{refspec}"`
    $?.success? or raise "Failed to fetch PR branch"
  end

  def push_private_branch
    `git push --force origin "#{TARGET_BRANCH}"`
    $?.success? or raise "Failed to push PR branch to private repo"
  end

  private

  def public_repo
    "https://github.com/#{PUBLIC_GH_REPO}.git"
  end

end

class GithubClient
  def initialize
    @client = Net::HTTP.new("api.github.com", 443)
    @client.use_ssl = true
  end

  def public_pr(pr_number)
    # https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#get-a-pull-request
    get("/repos/#{PUBLIC_GH_REPO}/pulls/#{pr_number}")
  end

  def private_pr_for_branch(branch_name)
    # https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#list-pull-requests
    # note this ignores closed/merged PRs
    get("/repos/#{PRIVATE_GH_REPO}/pulls?head=buildkite:#{branch_name}").first
  end

  def open_pr(title:, body:, branch:)
    # https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#create-a-pull-request
    post("/repos/#{PRIVATE_GH_REPO}/pulls", {
      title: title,
      body: body,
      head: branch,
      base: "main"
    })
  end

  private

  def get(url)
    puts "#{CYAN}HTTP GET #{url}#{RESET}"
    response = @client.get(url, headers)
    colour = response.code.to_i < 400 ? GREEN_BOLD : RED_BOLD
    puts "#{colour}#{response.code} #{response.message}#{RESET}"

    response.value
    JSON.parse(response.body)
  end

  def post(url, payload)
    puts "#{CYAN}HTTP POST #{url}#{RESET}"
    response = @client.post(url, payload.to_json, headers)

    colour = response.code.to_i < 400 ? GREEN_BOLD : RED_BOLD
    puts "#{colour}#{response.code} #{response.message}#{RESET}"
    puts response.body

    response.value
    JSON.parse(response.body)
  end

  def headers
    {
      "Accept"               => "application/vnd.github+json",
      "Authorization"        => "Bearer #{GH_TOKEN}",
      "X-GitHub-Api-Version" =>"2022-11-28"
    }
  end
end

def write_annotation(content, style: "info")
  Open3.capture2("buildkite-agent", "annotate", "--style", style, stdin_data: content)
end

client = GithubClient.new
git = Git.new(GH_TOKEN)

puts "--- :git: Setting up credential helper"
git.setup_credential_helper!

puts "+++ :git: Syncing #{PUBLIC_GH_REPO} PR ##{PR_NUMBER} to local branch #{TARGET_BRANCH}"

git.sync_branch_locally(PR_NUMBER, TARGET_BRANCH)

puts "+++ :git: Pushing branch #{TARGET_BRANCH} to #{PRIVATE_GH_REPO}"
git.push_private_branch

puts "+++ :github: Fetching original PR #{PUBLIC_GH_REPO} ##{PR_NUMBER}"

public_pr = client.public_pr(PR_NUMBER)

puts "--- :octocat: Checking for PR for #{TARGET_BRANCH} in #{PRIVATE_GH_REPO}"

private_pr = client.private_pr_for_branch(TARGET_BRANCH)
puts private_pr

if private_pr
  annotation_content = <<~ANNOTATION
    :open-pr: Re-synced PR #{PUBLIC_GH_REPO} ##{PR_NUMBER} to private repo branch `#{TARGET_BRANCH}`.

    Original PR: https://github.com/#{PUBLIC_GH_REPO}/pull/#{PR_NUMBER}

    Private PR: #{private_pr["html_url"]} :robot_face:
  ANNOTATION

  write_annotation(annotation_content)
  exit 0
end

puts "+++ :open-pr: Creating PR for #{TARGET_BRANCH} in #{PRIVATE_GH_REPO}"

pr_description = <<-PR_DESCRIPTION

:robot: Synced by #{ENV["BUILDKITE_BUILD_URL"]} :robot:

_Note_: The original public PR will automatically close when this PR is merged. If there are additional changes to sync from the public PR, re-run the [Docs (Sync public PR)](https://buildkite.com/buildkite/docs-sync-public-pr) Pipeline.

https://buildkite.com/organizations/buildkite/pipelines/docs-sync-public-pr/builds/new?meta_data[pull_request_number]=#{PR_NUMBER}

---

## [docs##{PR_NUMBER}](#{public_pr["html_url"]}): #{public_pr["title"]}

Opened by @#{public_pr.dig("user", "login")}

#{public_pr["body"]}
PR_DESCRIPTION

private_pr = client.open_pr(title: public_pr["title"], body: pr_description, branch: TARGET_BRANCH)

annotation_content = <<~ANNOTATION
  :open-pr: Synced PR #{PUBLIC_GH_REPO} ##{PR_NUMBER} to private repo branch `#{TARGET_BRANCH}`.

  Original PR: #{public_pr["html_url"]} - #{public_pr["title"]} by @#{public_pr.dig("user", "login")}

  Private PR: #{private_pr["html_url"]} :robot_face:
ANNOTATION

write_annotation(annotation_content)
